
import itertools
import time
import streamlit as st
from backend.service.product_searching_service import ProductSearching
from backend.service.func_prompt import res_gemini
from backend.service.voice_speech_to_text import speech_to_text
from streamlit_float import *
import pandas as pd
import numpy as np
import time
from datetime import datetime




def main():
    st.sidebar.title("Menu")
    page = st.sidebar.radio("Ch·ªçn trang:", ["Trang ch·ªß", "S·∫£n ph·∫©m", "Tr·ª£ l√Ω","Thi·∫øt b·ªã", "Li√™n h·ªá"])
    
    if page == "Trang ch·ªß":
        home_page()
    if page == "S·∫£n ph·∫©m":
        searching_page()
    elif page == "Tr·ª£ l√Ω":
        about_page()
    elif page == "Li√™n h·ªá":
        contact_page()
    elif page == "Thi·∫øt b·ªã":
        Device()


def home_page():
    st.title("Trang ch·ªß")
    image_paths = ["assets/1.jpg", "assets/2.jpg", "assets/3.jpg"]  # Thay th·∫ø b·∫±ng danh s√°ch ·∫£nh th·ª±c t·∫ø
    img_placeholder = st.empty()
    
    for img_path in itertools.cycle(image_paths):
        img_placeholder.image(img_path, use_container_width=True)
        time.sleep(2)
    

def searching_page():
    user_input = st.text_input("Nh·∫≠p g√¨ ƒë√≥:")
    product_searching_service = ProductSearching()

    if st.button("G·ª≠i"):
        products = product_searching_service.search(user_input)
        if products:
            st.write("### K·∫øt qu·∫£ t√¨m ki·∫øm:")
            for product in products:
                col1, col2 = st.columns([1, 2])
                with col1:
                    try:
                        st.image(product['image'], caption=product['product_name'], use_container_width=True)
                    except:
                        pass
                with col2:
                    st.write(f"**{product['product_name']}**")
                    st.write(f"Gi√°: {product.get('price', 'Kh√¥ng c√≥ th√¥ng tin')}")
                    st.write(f"M√¥ t·∫£: {product.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')}")
        else:
            st.write("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o.")

def about_page():
    # st.title("Tr·ª£ l√Ω")
    # user_input = st.text_input("Nh·∫≠p g√¨ ƒë√≥:")
    # if user_input:
    #     response = res_gemini(user_input)
    #     st.write(response)

    # Streamed response emulator
    def response_generator(prompt):
        response = res_gemini(prompt)
        for word in response.split():
            yield word + " "
            time.sleep(0.05)


    st.title("Chatbot")

    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Display chat messages from history on app rerun
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # --- Auto-scroll to bottom using JavaScript ---
    scroll_script = """
    <script>
        var chatContainer = window.parent.document.querySelector("section.main");
        if (chatContainer) {
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }
    </script>
    """
    st.markdown(scroll_script, unsafe_allow_html=True)
            
    


    # --- ƒê·∫∑t input ·ªü d∆∞·ªõi c√πng ---
    input_container = st.container()  # T·∫°o m·ªôt container tr·ªëng ƒë·ªÉ gi·ªØ input ·ªü d∆∞·ªõi

    with input_container.container():  # ƒê·∫£m b·∫£o ph·∫ßn input n·∫±m cu·ªëi
        col1, col2 = st.columns([8, 2])  # Chia layout 2 c·ªôt: input text (8 ph·∫ßn), voice button (2 ph·∫ßn)
        
        with col1:
            prompt = st.chat_input("Type your message...")  # Input text
        
        with col2:
            if st.button("üéôÔ∏è Speak"):
                prompt = speech_to_text()  # Gi·∫£ s·ª≠ ƒë√¢y l√† h√†m nh·∫≠n d·∫°ng gi·ªçng n√≥i

    input_container.float("bottom: 3rem;")    

    # Accept user input
    if prompt:
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": prompt})
        # Display user message in chat message container
        with st.chat_message("user"):
            st.markdown(prompt)

        # Display assistant response in chat message container
        with st.chat_message("assistant"):
            response = st.write_stream(response_generator(prompt))
        # Add assistant response to chat history
        st.session_state.messages.append({"role": "assistant", "content": response})


def contact_page():
    st.title("Li√™n h·ªá")
    st.write("B·∫°n c√≥ th·ªÉ li√™n h·ªá ch√∫ng t√¥i qua email: contact@example.com")


def Device():
    st.title("D·ªØ li·ªáu Smartcart (Real-Time)")

    # S·ªë l∆∞·ª£ng ƒëi·ªÉm d·ªØ li·ªáu c·∫ßn hi·ªÉn th·ªã t·∫°i m·ªói th·ªùi ƒëi·ªÉm
    n_points = 20
    
    # T·∫°o v√πng tr·ªëng ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i chart
    chart_placeholder = st.empty()

    # D·ªØ li·ªáu th·ªùi gian th·ª±c
    times = []

    # S·ª≠ d·ª•ng v√≤ng l·∫∑p ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu theo th·ªùi gian th·ª±c
    while True:
        # Gi·∫£ l·∫≠p d·ªØ li·ªáu cho 'weight' v√† 'voltage'
        np.random.seed(int(time.time()))  # S·ª≠ d·ª•ng th·ªùi gian hi·ªán t·∫°i l√†m seed ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu ng·∫´u nhi√™n
        weight = np.random.normal(100, 10)  # Tr·ªçng l∆∞·ª£ng v·ªõi trung b√¨nh 100kg v√† ƒë·ªô l·ªách chu·∫©n 10
        voltage = np.random.normal(5, 0.1)  # ƒêi·ªán √°p v·ªõi trung b√¨nh 5V v√† ƒë·ªô l·ªách chu·∫©n 0.1

        # L·∫•y th·ªùi gian hi·ªán t·∫°i
        current_time = datetime.now()

        # Th√™m th·ªùi gian v√† d·ªØ li·ªáu v√†o danh s√°ch
        times.append(current_time)
        
        # Gi·ªõi h·∫°n s·ªë ƒëi·ªÉm d·ªØ li·ªáu hi·ªÉn th·ªã
        if len(times) > n_points:
            times.pop(0)

        # T·∫°o DataFrame
        chart_data = pd.DataFrame({
            'Time': times,
            'Weight (kg)': np.random.normal(100, 10, len(times)),
            'Voltage (V)': np.random.normal(5, 0.1, len(times))
        })

        # Hi·ªÉn th·ªã d·ªØ li·ªáu d·∫°ng b·∫£ng
        # chart_placeholder.write(chart_data)

        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì line chart
        chart_placeholder.line_chart(chart_data.set_index('Time'))

        # D·ª´ng l·∫°i 1 gi√¢y ƒë·ªÉ m√¥ ph·ªèng c·∫≠p nh·∫≠t d·ªØ li·ªáu theo th·ªùi gian th·ª±c
        time.sleep(3)


if __name__ == "__main__":
    main()